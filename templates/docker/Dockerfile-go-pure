# Multi-stage Dockerfile for Pure Go applications (no CGO)
# Use this template when your application doesn't require CGO
# (e.g., using modernc.org/sqlite instead of mattn/go-sqlite3)

# Stage 1: Build the Go application
FROM golang:1.25-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /app

# Copy go.mod and go.sum for dependency caching
COPY go.mod go.sum ./

# Download dependencies (cached if go.mod/go.sum unchanged)
RUN go mod download

# Copy source code
COPY . .

# Build the application
# CGO_ENABLED=0: Build static binary without CGO
# -ldflags="-w -s": Strip debug information for smaller binary
# -trimpath: Remove file system paths from binary
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags="-w -s" \
    -trimpath \
    -o app \
    .

# Stage 2: Create minimal runtime image
FROM alpine:3.19

# Install runtime dependencies
RUN apk add --no-cache ca-certificates tzdata

# Create non-root user
RUN adduser -D -u 1000 appuser

# Set working directory
WORKDIR /app

# Copy binary from builder
COPY --from=builder /app/app .

# Copy static files (if needed)
# COPY --from=builder /app/static ./static
# COPY --from=builder /app/templates ./templates

# Copy configuration (if baking into image)
# COPY config.yaml .

# Create data directory and set ownership
RUN mkdir -p /data && chown -R appuser:appuser /app /data

# Switch to non-root user
USER appuser

# Expose application port
EXPOSE 8080

# Set environment variables
ENV PORT=8080

# Health check (optional - adjust URL as needed)
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# Run the application
CMD ["./app"]
